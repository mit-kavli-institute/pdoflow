name: Coverage Report

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_run:
    workflows: ["Tests"]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  coverage-comment:
    name: Coverage Comment
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' ||
      (github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.event == 'pull_request')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage[toml] coverage-badge

    - name: Download coverage from base branch
      if: github.event_name == 'pull_request'
      continue-on-error: true
      run: |
        # Try to get coverage from base branch
        git fetch origin ${{ github.base_ref }}:base-branch
        git checkout base-branch

        # Run coverage on base branch
        pip install -e ".[dev]"
        pip install pytest-postgresql

        # Create a simple test run to get baseline coverage
        coverage run -m pytest tests/ || true
        coverage json -o base-coverage.json

        # Switch back to PR branch
        git checkout -

    - name: Download current coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: ./coverage-artifacts

    - name: Generate coverage badge
      if: always()
      run: |
        # Extract coverage percentage
        if [ -f coverage-artifacts/coverage.json ]; then
          COVERAGE=$(python -c "import json; print(json.load(open('coverage-artifacts/coverage.json'))['totals']['percent_covered'])")
          echo "COVERAGE_PCT=$COVERAGE" >> $GITHUB_ENV

          # Generate badge
          coverage-badge -f -o coverage-badge.svg
        fi

    - name: Create coverage comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          // Read coverage data
          let coverageData = {};
          let baseCoverageData = {};

          try {
            if (fs.existsSync('coverage-artifacts/coverage.json')) {
              coverageData = JSON.parse(fs.readFileSync('coverage-artifacts/coverage.json', 'utf8'));
            }
          } catch (e) {
            console.log('Could not read current coverage data');
          }

          try {
            if (fs.existsSync('base-coverage.json')) {
              baseCoverageData = JSON.parse(fs.readFileSync('base-coverage.json', 'utf8'));
            }
          } catch (e) {
            console.log('Could not read base coverage data');
          }

          // Calculate coverage metrics
          const currentCoverage = coverageData.totals?.percent_covered || 0;
          const baseCoverage = baseCoverageData.totals?.percent_covered || 0;
          const coverageDiff = (currentCoverage - baseCoverage).toFixed(2);

          // Create coverage table
          let comment = `## Coverage Report\n\n`;
          comment += `| Metric | Base | PR | Change |\n`;
          comment += `|--------|------|----|---------|\n`;
          comment += `| **Total Coverage** | ${baseCoverage.toFixed(2)}% | ${currentCoverage.toFixed(2)}% | ${coverageDiff > 0 ? '+' : ''}${coverageDiff}% |\n`;

          if (coverageData.totals) {
            comment += `| Lines Covered | - | ${coverageData.totals.covered_lines}/${coverageData.totals.num_statements} | - |\n`;
            comment += `| Branches Covered | - | ${coverageData.totals.covered_branches}/${coverageData.totals.num_branches} | - |\n`;
          }

          comment += `\n### Coverage Summary\n`;

          if (currentCoverage >= 90) {
            comment += `✅ **Excellent!** Coverage is above 90%\n`;
          } else if (currentCoverage >= 80) {
            comment += `✅ **Good!** Coverage meets the minimum requirement of 80%\n`;
          } else {
            comment += `❌ **Warning!** Coverage is below the minimum requirement of 80%\n`;
          }

          if (coverageDiff > 0) {
            comment += `📈 Coverage increased by ${coverageDiff}%\n`;
          } else if (coverageDiff < 0) {
            comment += `📉 Coverage decreased by ${Math.abs(coverageDiff)}%\n`;
          } else {
            comment += `➡️ Coverage remained the same\n`;
          }

          // Find and update or create comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' && comment.body.includes('## Coverage Report')
          );

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  coverage-check:
    name: Coverage Status Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: ./coverage-artifacts

    - name: Check coverage threshold
      run: |
        if [ -f coverage-artifacts/coverage.json ]; then
          COVERAGE=$(python -c "import json; print(json.load(open('coverage-artifacts/coverage.json'))['totals']['percent_covered'])")
          echo "Current coverage: $COVERAGE%"

          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage is below 80% threshold!"
            exit 1
          else
            echo "Coverage meets the threshold!"
          fi
        else
          echo "No coverage data found!"
          exit 1
        fi
