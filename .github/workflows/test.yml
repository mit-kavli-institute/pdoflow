name: Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  HYPOTHESIS_PROFILE: ci

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testing
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install nox

    - name: Run tests with coverage
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: testing
        POSTGRES_DB: postgres
      run: |
        nox -s coverage -p ${{ matrix.python-version }}

    - name: Upload coverage data
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.python-version }}
        path: .coverage.*
        if-no-files-found: warn

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nox black flake8 mypy sqlalchemy-stubs

    - name: Run flake8
      run: |
        pip install -e . --extra-index-url https://mit-kavli-institute.github.io/MIT-Kavli-PyPi/
        flake8 src

    - name: Run mypy
      run: |
        mypy src

    - name: Check black formatting
      run: |
        pip install black==24.4.2
        black --check src tests

  coverage:
    name: Combine Coverage
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage[toml]

    - name: Download all coverage data
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        pattern: coverage-*
        merge-multiple: true

    - name: Check for coverage files
      id: check-coverage-files
      run: |
        if ls .coverage.* 1> /dev/null 2>&1; then
          echo "Coverage files found"
          echo "has_coverage=true" >> $GITHUB_OUTPUT
        else
          echo "No coverage files found"
          echo "has_coverage=false" >> $GITHUB_OUTPUT
        fi

    - name: Combine coverage
      if: steps.check-coverage-files.outputs.has_coverage == 'true'
      run: |
        coverage combine
        coverage report --fail-under=80
        coverage html
        coverage json

    - name: Create empty coverage report if needed
      if: steps.check-coverage-files.outputs.has_coverage == 'false'
      run: |
        echo "No coverage data available" > coverage.json
        mkdir -p htmlcov
        echo "<html><body>No coverage data available</body></html>" > htmlcov/index.html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          htmlcov/
          coverage.json
        retention-days: 7
        if-no-files-found: warn

    - name: Display coverage summary
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        coverage report >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Build docs
      run: |
        pip install -e . --extra-index-url https://mit-kavli-institute.github.io/MIT-Kavli-PyPi/
        pip install sphinx sphinx-rtd-theme
        cd docs && make html

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/build/html/
        retention-days: 7

  validate-version:
    name: Validate Version Format
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Validate version in pyproject.toml
      run: |
        VERSION=$(grep -E "^version = " pyproject.toml | cut -d'"' -f2)
        echo "Found version: $VERSION"

        # Validate semantic versioning format
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Error: Version '$VERSION' does not follow semantic versioning"
          echo "Expected format: MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD]"
          exit 1
        fi

        echo "Version format is valid: $VERSION"

    - name: Check version consistency with tags
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        PYPROJECT_VERSION=$(grep -E "^version = " pyproject.toml | cut -d'"' -f2)

        if [[ "$TAG_VERSION" != "$PYPROJECT_VERSION" ]]; then
          echo "Error: Tag version ($TAG_VERSION) does not match pyproject.toml version ($PYPROJECT_VERSION)"
          exit 1
        fi

        echo "Tag and pyproject.toml versions match: $TAG_VERSION"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install package and verify version
      run: |
        pip install -e . --extra-index-url https://mit-kavli-institute.github.io/MIT-Kavli-PyPi/
        INSTALLED_VERSION=$(python -c "import pdoflow; print(pdoflow.__version__)")
        PYPROJECT_VERSION=$(grep -E "^version = " pyproject.toml | cut -d'"' -f2)

        if [[ "$INSTALLED_VERSION" != "$PYPROJECT_VERSION" ]]; then
          echo "Error: Installed version ($INSTALLED_VERSION) does not match pyproject.toml ($PYPROJECT_VERSION)"
          exit 1
        fi

        echo "Version verification passed: $INSTALLED_VERSION"

  all-tests-pass:
    name: All Tests Pass
    needs: [test, lint, coverage, docs, validate-version]
    runs-on: ubuntu-latest
    steps:
      - name: Check all tests passed
        run: echo "All tests passed successfully!"
