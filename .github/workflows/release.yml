name: Manual Tag Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'

permissions:
  contents: write
  id-token: write

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      prerelease: ${{ steps.check_prerelease.outputs.prerelease }}

    steps:
    - uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Check if prerelease
      id: check_prerelease
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "prerelease=false" >> $GITHUB_OUTPUT
        else
          echo "prerelease=true" >> $GITHUB_OUTPUT
        fi

    - name: Validate semantic version
      run: |
        VERSION=${{ steps.get_version.outputs.version }}
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Error: Version '$VERSION' does not follow semantic versioning"
          exit 1
        fi

    - name: Check version in pyproject.toml
      run: |
        VERSION=${{ steps.get_version.outputs.version }}
        PYPROJECT_VERSION=$(grep -E "^version = " pyproject.toml | cut -d'"' -f2)
        if [[ "$PYPROJECT_VERSION" != "$VERSION" ]]; then
          echo "Error: Version mismatch!"
          echo "Tag version: $VERSION"
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          exit 1
        fi
        echo "Version check passed: $VERSION"

  build:
    name: Build Distribution
    needs: validate-version
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: |
        twine check --strict dist/*
        ls -la dist/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

  test-package:
    name: Test Package Import
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Install from wheel
      run: |
        pip install dist/*.whl --extra-index-url https://mit-kavli-institute.github.io/MIT-Kavli-PyPi/
        # Test that the package imports correctly
        python -c "import pdoflow; print(f'PDOFlow {pdoflow.__version__} imported successfully')"
        # Test CLI is available
        pdoflow --help

  github-release:
    name: Create GitHub Release
    needs: [validate-version, build, test-package]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [[ -z "$PREVIOUS_TAG" ]]; then
          echo "No previous tag found, including all commits"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" | head -20)
        else
          echo "Generating changelog from $PREVIOUS_TAG to HEAD"
          CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)")
        fi

        # Save to file for GitHub release
        cat > changelog.md << EOF
        ## What's Changed

        $CHANGELOG

        **Full Changelog**: ${PREVIOUS_TAG:+$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/compare/$PREVIOUS_TAG...}${{ needs.validate-version.outputs.version }}
        EOF

        echo "Generated changelog:"
        cat changelog.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: v${{ needs.validate-version.outputs.version }}
        body_path: changelog.md
        files: dist/*
        prerelease: ${{ needs.validate-version.outputs.prerelease == 'true' }}
        generate_release_notes: true

  publish-pypi:
    name: Publish to PyPI
    needs: [validate-version, build, test-package, github-release]
    runs-on: ubuntu-latest
    # Only publish non-prerelease versions
    if: needs.validate-version.outputs.prerelease == 'false'
    environment:
      name: pypi
      url: https://pypi.org/project/pdoflow/

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      # Uncomment when ready to publish to PyPI
      # with:
      #   password: ${{ secrets.PYPI_API_TOKEN }}

    - name: PyPI Publishing Skipped
      run: |
        echo "PyPI publishing is currently disabled."
        echo "To enable:"
        echo "1. Create a PyPI API token"
        echo "2. Add it as PYPI_API_TOKEN secret in GitHub"
        echo "3. Uncomment the 'with' block in the publish step above"
