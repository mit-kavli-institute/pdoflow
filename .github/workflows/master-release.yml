name: Master Official Release

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write
  id-token: write

jobs:
  create-official-release:
    name: Create Official Release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Get current version
      id: get_version
      run: |
        CURRENT_VERSION=$(grep -E "^version = " pyproject.toml | cut -d'"' -f2)
        # Remove any beta suffix for official release
        BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-beta\.[0-9]*//')
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        echo "Base version: $BASE_VERSION"

    - name: Calculate next version
      id: next_version
      run: |
        BASE_VERSION=${{ steps.get_version.outputs.base_version }}
        BUMP_TYPE="${{ github.event.inputs.version_bump || 'patch' }}"

        if [[ "$BASE_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          MAJOR="${BASH_REMATCH[1]}"
          MINOR="${BASH_REMATCH[2]}"
          PATCH="${BASH_REMATCH[3]}"

          case "$BUMP_TYPE" in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
            *)
              echo "Invalid bump type: $BUMP_TYPE"
              exit 1
              ;;
          esac
        else
          echo "Error: Invalid version format: $BASE_VERSION"
          exit 1
        fi

        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Next version: $NEW_VERSION (bump: $BUMP_TYPE)"

    - name: Check if tag exists
      id: check_tag
      run: |
        NEW_VERSION=${{ steps.next_version.outputs.new_version }}
        if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
          echo "Tag v$NEW_VERSION already exists"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "tag_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Update version in pyproject.toml
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        NEW_VERSION=${{ steps.next_version.outputs.new_version }}
        sed -i "s/^version = .*/version = \"$NEW_VERSION\"/" pyproject.toml

        # Also update __version__ if it exists
        if [ -f "src/pdoflow/__init__.py" ]; then
          if grep -q "__version__" src/pdoflow/__init__.py; then
            sed -i "s/__version__ = .*/__version__ = \"$NEW_VERSION\"/" src/pdoflow/__init__.py
          fi
        fi

    - name: Configure Git
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

    - name: Commit version bump
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        git add pyproject.toml
        if [ -f "src/pdoflow/__init__.py" ]; then
          git add src/pdoflow/__init__.py
        fi
        git commit -m "chore: bump version to ${{ steps.next_version.outputs.new_version }} for official release [skip ci]"

    - name: Create and push tag
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        NEW_VERSION=${{ steps.next_version.outputs.new_version }}
        git tag -a "v$NEW_VERSION" -m "Official release v$NEW_VERSION"
        git push origin HEAD
        git push origin "v$NEW_VERSION"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: |
        twine check --strict dist/*
        ls -la dist/

    - name: Generate comprehensive changelog
      id: changelog
      run: |
        NEW_VERSION=${{ steps.next_version.outputs.new_version }}

        # Get the previous release tag
        PREVIOUS_TAG=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" | grep -v beta | grep -v "v$NEW_VERSION" | sort -V | tail -1)

        if [[ -z "$PREVIOUS_TAG" ]]; then
          echo "No previous release found, this is the first release"
          COMPARE_BASE=$(git rev-list --max-parents=0 HEAD)
        else
          COMPARE_BASE=$PREVIOUS_TAG
        fi

        # Generate categorized changelog
        cat > changelog.md << 'EOF'
        ## Official Release ${{ steps.next_version.outputs.new_version }}

        ### Summary
        EOF

        # Count commits
        COMMIT_COUNT=$(git rev-list $COMPARE_BASE..HEAD --count)
        echo "This release includes $COMMIT_COUNT commits since ${PREVIOUS_TAG:-the beginning}." >> changelog.md
        echo "" >> changelog.md

        # Categorize commits
        echo "### Features" >> changelog.md
        git log $COMPARE_BASE..HEAD --grep="^feat" --pretty=format:"- %s (%h)" >> changelog.md || echo "- No new features" >> changelog.md
        echo -e "\n" >> changelog.md

        echo "### Bug Fixes" >> changelog.md
        git log $COMPARE_BASE..HEAD --grep="^fix" --pretty=format:"- %s (%h)" >> changelog.md || echo "- No bug fixes" >> changelog.md
        echo -e "\n" >> changelog.md

        echo "### Other Changes" >> changelog.md
        git log $COMPARE_BASE..HEAD --pretty=format:"- %s (%h)" | grep -v "^- feat" | grep -v "^- fix" | head -20 >> changelog.md
        echo -e "\n" >> changelog.md

        echo "### Installation" >> changelog.md
        cat >> changelog.md << 'EOF'

        ```bash
        pip install pdoflow==${{ steps.next_version.outputs.new_version }}
        ```

        ### Upgrading

        ```bash
        pip install --upgrade pdoflow
        ```
        EOF

        # Add comparison link
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo -e "\n**Full Changelog**: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/compare/$PREVIOUS_TAG...v$NEW_VERSION" >> changelog.md
        fi

    - name: Create GitHub Release
      if: steps.check_tag.outputs.tag_exists == 'false'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.next_version.outputs.new_version }}
        name: v${{ steps.next_version.outputs.new_version }}
        body_path: changelog.md
        files: dist/*
        prerelease: false
        generate_release_notes: true

    - name: Publish to PyPI
      if: steps.check_tag.outputs.tag_exists == 'false'
      continue-on-error: true
      run: |
        echo "PyPI publishing is currently disabled."
        echo "To enable PyPI publishing:"
        echo "1. Create a PyPI API token at https://pypi.org/manage/account/token/"
        echo "2. Add it as PYPI_API_TOKEN secret in GitHub repository settings"
        echo "3. Uncomment the pypa/gh-action-pypi-publish step below"

    # Uncomment when ready to publish to PyPI
    # - name: Publish to PyPI
    #   if: steps.check_tag.outputs.tag_exists == 'false'
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Summary
      run: |
        if [[ "${{ steps.check_tag.outputs.tag_exists }}" == "true" ]]; then
          echo "## Release Skipped" >> $GITHUB_STEP_SUMMARY
          echo "Tag v${{ steps.next_version.outputs.new_version }} already exists" >> $GITHUB_STEP_SUMMARY
        else
          echo "## Official Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Version Information" >> $GITHUB_STEP_SUMMARY
          echo "- Previous: ${{ steps.get_version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- New: ${{ steps.next_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${GITHUB_REF#refs/heads/}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Release: Created âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- PyPI: Disabled (see logs for instructions)" >> $GITHUB_STEP_SUMMARY
        fi
